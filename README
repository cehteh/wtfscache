I got annoyed searching for a *useable* network filesystem with local caching,
and disconnected operation. So I hacked this redneck style bash script.

This prototype uses sshfs and unionfs-fuse. Other setups (nfs, overlayfs) may
be possible, but are not topic yet. Using fuse based filesystem has some
advantages for developing as well drawback because of limited/lacking
features. Bear with it. Nevertheless it aims to be useable as in making sure
that no data gets lost or corrupted.

The topology for now is restricted to a single master server (remote). Later filesystems

== Features (some are planned)

- Cache everything locally
- Have a garbage collector which manages the local cache
- Pinning files locally
- Disconnected operation with detached files and merging them later
- Transparent data storage. If everything breaks, there are still plain files
  on the disk!


== Plan

- Make it useable ASAP


== Howto

init <name> ::
  creates a new cache dir and config

start <name> ::
  start the daemon

stop <name> ::
  stops the daemon

pin <files..> ::
  pin files to a 'precious' dir which doesnt get garbage collected

get <files..> ::
  fetches the given files into the cache

drop <files> ::
  removes files from the cache. With '--pin' as fist option, drops pinned files.


// PLANNED:

// disconnect <name> ::
//   manual disconnected operation

// connect <name> ::
//   reconnect after a (manual) disconnection

// detach <files..> ::
//   detach files from the remote, keep edits local

// status <name> ::
//   print some infos

// prune <files..> ::
//   remove a file, including backups, also from master
//   --master from master
//   --backups including backups
//   --all same as --master --backups

// merge <files..> ::
//   merge detached files back to the remote

// undelete <files..> ::
//   restores a deleted file

// undo <files..> ::
//   restores the last backup of files.

// history <files> ::
//   shows the edit history of files

// gc <name> [--clean | size] ::
//   manual gc run, until size MB space become available or
//   clean the complete cache.

=== Config

min_free ::
  Starting garbage collector when less then this MB space is free.

max_free ::
  Stopping the gc when this much MB space is free.

remote ::
  'user@host:directory' spec defining the master server.

backups ::
  how backups are done when commiting changes to the master (writes)

  none :::
    never make backups

  numbered :::
    make numbered backups

  existing :::
    numbered if numbered backups exist, simple otherwise

  simple :::
    make simple backups

//Planned:
//write=detach, backup
//merge=auto,manual
//delete=local,master
//verify=strict,..


== Internals

=== Directory structure

For caching under 'test':

 test/                   The user visible mountpoint of the cache
 .test/                  Hidden dir with the internals
 .test/config            configuration
 .test/status            current status

 .test/master/           mountpoint for the remote master filesystem
 .test/local/            'detached' files which have no replica in master
 .test/precious/         'pinned' files which should not be gc'ed
 .test/cache/            cache area which gets gc'ed

 .test/detached.log      log of files which got automatically detached


later:
 2 cache stages to preseve original file locally (for merging)
 test/mergefail.log      log of files which cant be automatically merged


=== Variables

WTFSCACHE ::
  basename of the cache

WTFSCACHEROOT ::
  path to the cache root

WTFSCACHEMOUNT ::
  path where the visible user dir is mounted

WTFSCACHEMETA ::
  path for metadata

WTFSCACHETMP ::
  path for tempfiles


status ::
  connected :::
    connected to master
  disconnected :::
    manually disconnected from master
  offline :::
    lost connection to master, will automatically reconnect

== License

DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE

this license applies to this shell-script prototype implementation. Future
more serious implementations (if ever happen) may use another Free Software
License.
