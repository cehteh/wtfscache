I got annoyed searching for a *useable* network filesystem with local caching,
and disconnected operation. So I hacked this redneck style bash script.

This prototype uses sshfs and unionfs-fuse. Other setups (nfs, overlayfs) may
be possible, but are not topic yet. Using fuse based filesystem has some
advantages for developing as well drawback because of limited/lacking
features. Bear with it. Nevertheless it aims to be useable as in making sure
that no data gets lost or corrupted.

The topology for now is restricted to a single master server (remote). Later filesystems

== Features (some are planned)

- Cache everything locally
- Have a garbage collector which manages the local cache
- Pinning files locally
- Disconnected operation with detached files and merging them later
- Transparent data storage. If everything breaks, there are still plain files
  on the disk!


== Plan

- Make it useable ASAP


== Howto

Read the source, Luke.


== Internals

=== Directory structure

For caching under 'test':

 test/                   The user visible mountpoint of the cache
 .test/                  Hidden dir with the internals
 .test/config            configuration
 .test/status            current status

 .test/master/           mountpoint for the remote master filesystem
 .test/local/            'detached' files which have no replica in master
 .test/precious/         'pinned' files which should not be gc'ed
 .test/cache/            cache area which gets gc'ed

 .test/detached.log      log of files which got automatically detached


later:
 2 cache stages to preseve original file locally (for merging)
 test/mergefail.log     log of files which cant be automatically merged

== License

DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE

this license applies to this shell-script prototype implementation. Future
more serious implementations (if ever happen) may use another Free Software
License.
