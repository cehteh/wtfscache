#!/bin/bash
LC_ALL=C

export WTFSCACHE
export WTFSCACHEMOUNT
export WTFSCACHEMETA
export WTFSCACHEREPO

export gczone
export remote
export backups
export startup
export master_timeout
export master_poll

#PLANNED: destroy command
#PLANNED: config for merge (auto/manual)
#PLANNED: ignore patterns for copy_up, config copyup behaviour
#PLANNED: gc pinned files for min_free
#PLANNED: verify level: before deleting: none, exists, compare

#TODO: unpin:: precious -> cache
#TODO: prune:: remove all traces of a file, including backups, also from master
#TODO: ???:: propagate deleted files to the remote mode=writeback, local, deletes
#TODO: undelete/undo/history:: work with backup files and whiteouts
#TODO: clean/gc:: manual gc run
#PLANNED: gc priorities, add time ofsets/factors
#TODO: caching/copy_up configureable, only cow by pattern?
#PLANNED: --connect/--disconnect option for start
#FIXME: filenames with leading/trailing spaces

function dbg ()
{
    echo "$*" 1>&2
}

function die ()
{
    echo "$*" 1>&2
    exit 1
}

function disk_free ()
{
    echo -n $(df -B 1M --no-sync --output=avail -l "$1" | tail -1)
}

function gc ()
{
    dbg "GC AVAILABLE $(disk_free "$WTFSCACHEREPO/cache/.")"
    source "$HOME/.wtfscache/$gczone.gcconf"

    if [[ ! -f "$HOME/.wtfscache/$gczone.lst" ]] && (($(disk_free "$WTFSCACHEREPO/cache/.") <= $min_free)); then
            find "$HOME/.wtfscache" -not -path '*/repo/*' -and -name 'config' -exec grep -l "gczone='$gczone'" {} + |
                    while read file; do
                        find "${file%/config}/repo/cache" -type f -not -name '*_HIDDEN~' -printf '%A@ %p\n'
                    done | sort -n  >>"$HOME/.wtfscache/$gczone.lst"

            while (($(disk_free "$WTFSCACHEREPO/cache/.") < $max_free)); do
                read _ file || break
                dbg "RM $file"
                [[ -f "$file" ]] && rm "$file"
            done <"$HOME/.wtfscache/$gczone.lst"

            #prune empty dirs
            find "$HOME/.wtfscache" -not -path '*/repo/*' -and -name 'config' -exec grep -l "gczone='$gczone'" {} + |
                    while read file; do
                        find "${file%/config}/repo/cache" -type d -empty -delete
                    done

            rm "$HOME/.wtfscache/$gczone.lst"
    fi
}

function wtfscache_gc ()
{
    setup "$1"
    gc
}


function check_connection ()
{
    source "$WTFSCACHEMETA/status"
    if [[ "$status" != disconnected ]]; then
            if { timeout -s9 ${master_timeout} touch -ac "$WTFSCACHEREPO/master/."; } 2>/dev/null ; then
                    if [[ "$status" == offline ]]; then
                            status=connected
                            write_status
                            auto_merge
                    fi
            else
                if [[ "$status" == connected ]]; then
                        status=offline
                        write_status
                fi
            fi
    fi
}

function poll_connection ()
{
    while sleep "$master_poll"; do
        check_connection
    done
}

function wtfscache_disconnect ()
{
    setup "$1"
    status=disconnected
    write_status
}

function wtfscache_connect ()
{
    setup "$1"
    status=connected
    write_status
    auto_merge
}

function copy_up ()
{
    check_connection

    if [[ "$status" == connected && ! ( -f "$WTFSCACHEREPO/cache/${1}"
           || -f "$WTFSCACHEREPO/precious/${1}"
           || -f "$WTFSCACHEREPO/local/${1}" ) ]]; then
            dbg "COPY_UP $1"
            touch -ac "$WTFSCACHEMOUNT/$1"
            gc
    fi
}

function commit ()
{
    local merge="$1"
    if [[ "$merge" == '--merge' ]]; then
            shift
            dbg "MERGE $1"
    fi

    [[ "$merge" != '--merge' && -f "$WTFSCACHEREPO/local/${1}" ]] && return

    check_connection

    if [[ "$status" == connected ]]; then
            dbg "COMMIT $1"
            local dir="/${1}"
            dir="${dir%/*}"

            mkdir -p "$WTFSCACHEREPO/master/$dir"

            if [[ -f "$WTFSCACHEREPO/cache/${1}" ]]; then
                    cp --backup="$backups" "$WTFSCACHEREPO/cache/${1}" "$WTFSCACHEREPO/master/${1}"
            elif [[ -f "$WTFSCACHEREPO/precious/${1}" ]]; then
                    cp --backup="$backups" "$WTFSCACHEREPO/precious/${1}" "$WTFSCACHEREPO/master/${1}"
            elif [[ "$merge" == '--merge' && -f "$WTFSCACHEREPO/local/${1}" ]]; then
                    cp --backup="$backups" "$WTFSCACHEREPO/local/${1}" "$WTFSCACHEREPO/master/${1}"
            fi
            gc
    else
        if [[ -f "$WTFSCACHEREPO/cache/${1}" ]]; then
                echo "cached ${1}" >>"$WTFSCACHEREPO/detached.log"
        elif [[ -f "$WTFSCACHEREPO/precious/${1}" ]]; then
                echo "pinned ${1}" >>"$WTFSCACHEREPO/detached.log"
        else
            return
        fi
        dbg "AUTO_DETACH $1"
        detach_file "$1"
    fi
}


function var ()
{
    echo "$1='${!1}'"
}


function write_status ()
{
    status_time=$(date -u +%s)
    dbg "STATUS $status"
    cat >"$WTFSCACHEMETA/status" <<EOF
$(var status_time)
$(var status)
$(var pid)
EOF
}


function file_status
{
    [[ -f "$WTFSCACHEREPO/cache/$1" ]] && { echo "cached"; return; }
    [[ -f "$WTFSCACHEREPO/precious/$1" ]] && { echo "pinned"; return; }
    [[ -f "$WTFSCACHEREPO/local/$1" ]] && { echo "detached"; return; }
    [[ "$status" == 'connected' ]] && [[ -f "$WTFSCACHEREPO/master/$1" ]] && { echo "remote"; return; }
}


function normalize_filename ()
{
    local file="$(readlink -m "$1")"
    echo "${file##$WTFSCACHEMOUNT/}"
}


function wtfscache_status ()
{
    setup "$1"

    echo "Mountpoint: $WTFSCACHEMOUNT"
    echo "State: $status"
    echo "Cached: $(du -sh "$WTFSCACHEREPO/cache" | awk '{print $1}')"
    echo "Pinned: $(du -sh "$WTFSCACHEREPO/precious" | awk '{print $1}')"
    echo "Local: $(du -sh "$WTFSCACHEREPO/local" | awk '{print $1}')"
    [[ "$status" == 'connected' ]] && echo "Remote: $(du -sh "$WTFSCACHEREPO/master" | awk '{print $1}')"

    for i in "$@"; do
        if [[ -f "$i" ]]; then
                echo
                local file="$(normalize_filename "$i")"

                echo "$file"
                echo " Status: $(file_status "$file")" #TODO: unmerged
                echo " Size: $(du -sh "$WTFSCACHEMOUNT/$file" | awk '{print $1}')"
        fi
    done
}



function wtfscache_start ()
{
    WTFSCACHEMOUNT="$(readlink -m "$1")"
    WTFSCACHE="${WTFSCACHEMOUNT#$HOME/}"
    WTFSCACHEMETA="$HOME/.wtfscache/$WTFSCACHE"
    WTFSCACHEREPO="$(readlink -f "$WTFSCACHEMETA/repo")"

    [[ -f "$WTFSCACHEMETA/config" ]] || die "not a wtfscache"
    source "$WTFSCACHEMETA/config"

    pid="$$"
    status="$startup"

    unionfs-fuse -o cow,use_ino "$WTFSCACHEREPO/cache"=RW:"$WTFSCACHEREPO/precious"=RW:"$WTFSCACHEREPO/local"=RW:"$WTFSCACHEREPO/master"=RO "$WTFSCACHEMOUNT"

    if [[ "$startup" == 'connected' ]]; then
            sshfs -o compression=yes,reconnect,ServerAliveInterval=15,ServerAliveCountMax=3,idmap=user "$remote" "$WTFSCACHEREPO/master" || status=offline
    fi

    write_status

    cd "/"

    trap : INT

    gc

    #TODO: no polling when disconnected
    poll_connection &
    [[ "$status" == 'connected' ]] && auto_merge &

    # loop? restart? what about new dirs?
    inotifywait -m -r --format '%e %w%f' -e open,close_write "$WTFSCACHEMOUNT" |
            while read -r; do
                $0 EVENT "$REPLY" &
            done

    dbg "
DONE"
    fusermount -u -z "$WTFSCACHEMOUNT"
    source "$WTFSCACHEMETA/status"
    [[ "$status" == 'connected' ]] && fusermount -u -z "$WTFSCACHEREPO/master"
    rm "$WTFSCACHEMETA/status"
}



function query ()
{
    read -e -i "$3" -p "$1
$2 = " $2
    [[ "$4" ]] && echo "# $1
$2='${!2:-$3}'

"
}


function wtfscache_init ()
{
    WTFSCACHEMOUNT="$(readlink -m "$1")"
    WTFSCACHE="${WTFSCACHEMOUNT#$HOME/}"
    WTFSCACHEMETA="$HOME/.wtfscache/$WTFSCACHE"

    mkdir -p "$1" >&/dev/null
    [[ -d "$1" ]] || die "NOT A DIR $1"
    [[ -n "$(find "$1" -prune -empty)" ]] || die "NOT AN EMPTY DIR $1"

    mkdir -p "$WTFSCACHEMETA" >&/dev/null

    local repo
    query "repository location" repo "$WTFSCACHEMETA/repo"

    repo="$(readlink -m "$repo")"

    if [[ "$repo" == "$WTFSCACHEMETA/repo" ]]; then
       mkdir -p "$WTFSCACHEMETA/repo" >&/dev/null
    else
       mkdir -p "$repo" >&/dev/null
       [[ -d "$repo" ]] || die "NOT A DIR $repo"
       [[ -n "$(find "$repo" -prune -empty)" ]] || die "NOT AN EMPTY DIR $repo"
       ln -s "$repo" "$WTFSCACHEMETA/repo"
    fi

    WTFSCACHEREPO="$(readlink -f "$WTFSCACHEMETA/repo")"

    mkdir -p "$WTFSCACHEREPO/master" "$WTFSCACHEREPO/local/.wtfscache" "$WTFSCACHEREPO/precious" "$WTFSCACHEREPO/cache" >&/dev/null

    [[ -f "$WTFSCACHEREPO/local/.wtfscache/name" ]] || echo "$WTFSCACHE" >"$WTFSCACHEREPO/local/.wtfscache/name"

    local gczone="$(df -B 1M --no-sync --output=source -l "$repo" | tail -1)"
    gczone="${gczone#/dev/}"
    gczone="${gczone//\//_/}"

    [[ -f "$WTFSCACHEMETA/config" ]] || cat >"$WTFSCACHEMETA/config" <<EOF
$(query "Master server as 'user@host:directory'" remote '' x)
$(query 'Backup mode' backups numbered x)
$(query 'Startup state (connected/disconnected)' startup connected x)
$(query 'Timeout for for connecting master' master_timeout 5 x)
$(query 'Timeout for for polling master' master_poll 10 x)
$(query "GC zone" gczone "$gczone" x)
EOF

    [[ -f "$HOME/.wtfscache/$gczone.gcconf" ]] || cat >"$HOME/.wtfscache/$gczone.gcconf" <<EOF
$(query 'Starting garbage collector when less then this MB space is free' min_free 1024 x)
$(query 'Stopping the gc when this much MB space is free' max_free 2048 x)
EOF
}

function setup ()
{
    local startdir="$PWD"
    cd "${1%/*}" >&/dev/null

    while [[ "$PWD" != '/' && ! -f ".wtfscache/name" ]]; do
        cd ..
    done

    if [[ -f ".wtfscache/name" ]]; then
            WTFSCACHEMOUNT="$PWD"
            WTFSCACHE="${WTFSCACHEMOUNT#$HOME/}"
            WTFSCACHEMETA="$HOME/.wtfscache/$WTFSCACHE"
            WTFSCACHEREPO="$(readlink -f "$WTFSCACHEMETA/repo")"
    else
        die "no wtfscache or not started"
    fi

    cd "$startdir"
    source "$WTFSCACHEMETA/config"
    source "$WTFSCACHEMETA/status"
}

function get ()
{
    local pin="$1"
    if [[ "$pin" == '--pin' ]]; then
            shift
    fi

    setup "$1"

    for i in "$@"; do
        local file="$(normalize_filename "$i")"
        if [[ -f "$WTFSCACHEMOUNT/$file" ]]; then
                copy_up "$file"
                if [[ "$pin" == '--pin' ]]; then
                        dbg "PIN ${file}"
                        local dir="/${file}"
                        dir="${dir%/*}"
                        mkdir -p "$WTFSCACHEREPO/precious/$dir"
                        [[ -f "$WTFSCACHEREPO/cache/${file}" ]] && mv "$WTFSCACHEREPO/cache/${file}" "$WTFSCACHEREPO/precious/${file}"
                fi
        #PLANNED: else pattern?
        fi
    done
}


function drop ()
{
    local pin="$1"
    if [[ "$pin" == '--pin' ]]; then
            shift
    fi
    setup "$1"

    for i in "$@"; do
        local file="$(normalize_filename "$i")"
        if [[ -f "$WTFSCACHEMOUNT/$file" ]]; then
                dbg "DROP ${file}"

                #TODO: check for existence in remote
                [[ -f "$WTFSCACHEREPO/cache/${file}" ]] && rm "$WTFSCACHEREPO/cache/${file}"

                if [[ -f "$WTFSCACHEREPO/precious/${file}" ]]; then
                        if [[ "$pin" == '--pin' ]]; then
                                rm -f "$WTFSCACHEREPO/precious/${file}"
                        else
                            dbg "PINNED ${file}"
                        fi
                fi

                if [[ -f "$WTFSCACHEREPO/local/${file}" ]]; then
                        if cmp "$WTFSCACHEREPO/master/${file}" "$WTFSCACHEREPO/local/${file}" >&/dev/null; then
                                rm -f "$WTFSCACHEREPO/local/${file}"
                        else
                            dbg "UNMERGED ${file}"
                        fi
                fi
        #PLANNED: else pattern?
        fi
    done
}


function detach_file ()
{
    dbg "DETACH ${1}"
    local dir="/${1}"
    dir="${dir%/*}"

    mkdir -p "$WTFSCACHEREPO/local/$dir"
    if [[ -f "$WTFSCACHEREPO/cache/${1}" ]]; then
            mv "$WTFSCACHEREPO/cache/${1}" "$WTFSCACHEREPO/local/${1}"
    elif [[ -f "$WTFSCACHEREPO/precious/${1}" ]]; then
            mv "$WTFSCACHEREPO/precious/${1}" "$WTFSCACHEREPO/local/${1}"
    else
        dbg "NOT_AVAILABLE ${1}"
    fi
}


function detach ()
{
    setup "$1"

    for i in "$@"; do
        local file="$(normalize_filename "$i")"
        if [[ -f "$WTFSCACHEMOUNT/$file" && ! -f "$WTFSCACHEREPO/local/${file}" ]]; then
                copy_up "$file"
                detach_file "$file"
        #PLANNED: else pattern?
        fi
    done
}

function merge ()
{
    setup "$1"

    for i in "$@"; do
        local file="$(normalize_filename "$i")"
        if [[ -f "$WTFSCACHEREPO/local/${file}" ]]; then
                commit --merge "$file"
        fi
    done
}


function auto_merge ()
{
    if [[ -f "$WTFSCACHEREPO/detached.log" ]]; then
            while read where file; do
                if [[ -f "$WTFSCACHEREPO/local/${file}" ]]; then
                        dbg "AUTO_MERGE $file"
                        commit --merge "$file"
                        if [[ "$where" == 'cached' ]]; then
                                mv "$WTFSCACHEREPO/local/${file}" "$WTFSCACHEREPO/cache/${file}"
                        elif [[ "$where" == 'pinned' ]]; then
                                mv "$WTFSCACHEREPO/local/${file}" "$WTFSCACHEREPO/precious/${file}"
                        fi
                fi
            done <"$WTFSCACHEREPO/detached.log"
            rm "$WTFSCACHEREPO/detached.log"
    fi
}


case "$1" in
init)
    shift
    wtfscache_init "$@"
    ;;
start)
    shift
    wtfscache_start "$@"
    ;;
stop)
    shift
    setup "$1"
    kill -INT -"$pid"
    ;;
disconnect)
    shift
    wtfscache_disconnect "$@"
    ;;
connect)
    shift
    wtfscache_connect "$@"
    ;;
status)
    shift
    wtfscache_status "$@"
    ;;
get)
    shift
    get "$@"
    ;;
pin)
    shift
    get --pin "$@"
    ;;
detach)
    shift
    detach "$@"
    ;;
merge)
    shift
    merge "$@"
    ;;
drop)
    shift
    drop "$@"
    ;;
EVENT)
    shift
    case "$1" in
    "OPEN,ISDIR "*)
        :
        ;;
    "OPEN "*)
        copy_up "${1##OPEN $WTFSCACHEMOUNT/}"
        ;;
    "CLOSE_WRITE,CLOSE "*)
        commit "${1##CLOSE_WRITE,CLOSE $WTFSCACHEMOUNT/}"
        ;;
    *)
        die "unhandled event $@"
    esac
    ;;
*)
    die "unknown command $1"
    ;;
esac


